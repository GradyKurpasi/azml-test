"""'''
    ANFIS Prototype in Pytorch
    SSIE 616 project Phase 3
    based on ANFIS in torch by James Power

These scripts have been modified to run on Azure

All training scripts are stored locally in ./ANFIS-scripts/
These scripts will be wrapped in a container by Script Run Config below 
Training scripts will be published to the VM 
   616_ANFIS.py (training script)
   anfis.py (defines ANFIS model)
   membership.py (membership functions)
   experimental.py (controls experiments)

Training scripts can be written in pure python/pytorch
Training scripts do not need to reference the azureml sdk
BUT training scripts will have to access the azureml sdk to conduct logging
   from azureml.core import Run
   run = Run.get_context()  ### Add run context for AML
   run.log("{} Loss".format(phase), np.float(epoch_loss))
   run.log("{} Acc".format(phase), np.float(epoch_acc))

arguments can be passed to training script 
they have to be parsed in the training script
   import argparse
   parser = argparse.ArgumentParser()
   parser.add_argument("--data-folder", type=str, dest="data_folder", help="data folder mounting point", default="")
   parser.add_argument("--num-epochs", type=int, dest="num_epochs", help="Number of epochs", default="")
   args = parser.parse_args()
   data_path = args.data_folder

The file mounts for datasets in the VM will be (something like)
   data_path = /mnt/batch/tasks/shared/LS_root/jobs/azureml-pytorch/azureml/ANFIS-pytorch_1620012816_f08ea422/wd/tmpjdv3v5lk/

"""

import sys
import itertools
import numpy as np
import pandas as pd

import torch
from torch.utils.data import TensorDataset, DataLoader

import anfis
from membership import BellMembFunc, make_bell_mfs
from experimental import train_anfis, test_anfis
import argparse

dtype = torch.float

parser = argparse.ArgumentParser()
parser.add_argument("--data-folder", type=str, dest="data_folder", help="data folder mounting point", default="")
parser.add_argument("--num-epochs", type=int, dest="num_epochs", help="Number of epochs", default="")
args = parser.parse_args()
data_path = args.data_folder
#num_epochs = args.num_epochs


def MakeData():
    """quick pre processing of DataToBeModeled.csv
       data is split into Training and Testing data
       and pushed into Pytorch formats"""

    #read data into pandas dataframe for preprocessing
    filename = os.path.join(data_path, 'ANFIS.csv')
    df = pd.read_csv(filename)

    #X is a 2D array, Y is a 1D array
    X = np.array(df[['X1', 'X2']])
    Y = np.array(df['Y'])
    #RESHAPE IS NECESSARY OR CRITERION FUNCTION EXPERIENCES BROADCAST ERRORS WHEN COMPUTING LOSS IN EXPERIMENTAL.PY 137
    Y = Y.reshape(442,1)

    #slice data, 2/3 of data goes to train, 1/3 goes to test
    #slices taken from X, Y with [:,] notation
    #data cast into tensors to be passed to torch functions below
    Xtrain = torch.tensor(X[:295, ...], dtype = torch.float)
    # Ytrain = torch.from_numpy(Y)
    Ytrain = torch.tensor(Y[:295], dtype = torch.float)
    Xtest = torch.tensor(X[295:, ...], dtype = torch.float)
    Ytest = torch.tensor(Y[295:], dtype = torch.float)

    #wrap tensors in Pytorch TensorDataset
    tdTrain = TensorDataset(Xtrain, Ytrain)
    tdTest = TensorDataset(Xtest, Ytest)

    #feed data to Pytorch Dataloader
    dlTrain = DataLoader(tdTrain, batch_size=1024, shuffle=True)
    dlTest = DataLoader(tdTest, batch_size=1024, shuffle=True)

    return dlTrain, dlTest



def MakeModel():
    """creates ANFIS model in Pytorch 
       Initial alpha beta gamma values hardcoded
       membership functions generated by BellMembFunc
    """
    #starting alpha, beta gamma for membership functions
    p = {'S1alpha' : 1.5,   'S1beta' : 2,   'S1gamma' : 5, 
        'M1alpha' : 1,     'M1beta' : 2,  'M1gamma' : 7.5, 
        'L1alpha' : 1.5,   'L1beta' : 2,   'L1gamma' : 10, 
        'S2alpha' : 2.5,   'S2beta' : 2,   'S2gamma' : 8, 
        'M2alpha' : 1.5,   'M2beta' : 2,   'M2gamma' : 12, 
        'L2alpha' : 2.5,  'L2beta' : 2, 'L2gamma' : 16}

    invardefs = [
            ('x0', [BellMembFunc(p['S1alpha'], p['S1beta'], p['S1gamma']), BellMembFunc(p['M1alpha'], p['M1beta'], p['M1gamma']), BellMembFunc(p['L1alpha'], p['L1beta'], p['L1gamma'])]),
            ('x1', [BellMembFunc(p['S2alpha'], p['S2beta'], p['S2gamma']), BellMembFunc(p['M2alpha'], p['M2beta'], p['M2gamma']), BellMembFunc(p['L2alpha'], p['L2beta'], p['L2gamma'])]),
            ]
    outvars = ['y0']

    return anfis.AnfisNet('SSIE616', invardefs, outvars)


dlTrain, dlTest = MakeData()
anfModel = MakeModel()

trainRMSE = 99
lastRMSE = 100
testRMSE = 99
epochs = 0
while (testRMSE < lastRMSE) and epochs < 10000:
    with open('output.txt', 'a') as f:
        f.write('TRAINING RMS error={:.5f}'.format(trainRMSE))
        f.write('\n')
        f.write('TEST RMS error={:.5f}'.format(testRMSE))
        f.write('\n')
        f.write('\n')
        f.write(str(anfModel.layer.fuzzify.__repr__))
        f.write('\n')
        f.write('\n')
        f.write(str(anfModel.layer.consequent.coeff))
        f.write('\n')
        f.write('\n')
    trainRMSE = train_anfis(anfModel, dlTrain, 500, show_plots=False)
    lastRMSE = testRMSE
    testRMSE = test_anfis(anfModel, dlTest)


print('done')
