"""'''
    ANFIS Prototype in Pytorch
    SSIE 616 project Phase 3
    based on ANFIS in torch by James Power
"""

import sys
import itertools
import numpy as np
import pandas as pd

import torch
from torch.utils.data import TensorDataset, DataLoader

import anfis
from membership import BellMembFunc, make_bell_mfs
from experimental import train_anfis, test_anfis

dtype = torch.float

def MakeData():
    """quick pre processing of DataToBeModeled.csv
       data is split into Training and Testing data
       and pushed into Pytorch formats"""

    #read data into pandas dataframe for preprocessing
    df = pd.read_csv('Data to be Modeled with ANFIS.csv')

    #X is a 2D array, Y is a 1D array
    X = np.array(df[['X1', 'X2']])
    Y = np.array(df['Y'])
    #RESHAPE IS NECESSARY OR CRITERION EXPERIENCES BROADCAST ERRORS WHEN COMPUTING LOSS IN EXPERIMENTAL.PY 137
    Y = Y.reshape(442,1)

    #slice X, Y, 2/3 of data goes to train, 1/3 goes to test
    #slices taken with [:,] notation
    #data cast into tensors to be passed to torch functions below
    Xtrain = torch.tensor(X[:295, ...], dtype = torch.float)
    # Ytrain = torch.from_numpy(Y)
    Ytrain = torch.tensor(Y[:295], dtype = torch.float)
    Xtest = torch.tensor(X[295:, ...], dtype = torch.float)
    Ytest = torch.tensor(Y[295:], dtype = torch.float)

    #wrap tensors in Pytorch TensorDataset
    tdTrain = TensorDataset(Xtrain, Ytrain)
    tdTest = TensorDataset(Xtest, Ytest)

    #feed data to Pytorch Dataloader
    dlTrain = DataLoader(tdTrain, batch_size=1024, shuffle=True)
    dlTest = DataLoader(tdTest, batch_size=1024, shuffle=True)

    return dlTrain, dlTest



def MakeModel():
    """creates ANFIS model in Pytorch 
       Initial alpha beta gamma values hardcoded
       membership functions generated by BellMembFunc
    """
    #starting alpha, beta gamma for membership functions
    p = {'S1alpha' : 1.5,   'S1beta' : 2,   'S1gamma' : 5, 
        'M1alpha' : 1,     'M1beta' : 2,  'M1gamma' : 7.5, 
        'L1alpha' : 1.5,   'L1beta' : 2,   'L1gamma' : 10, 
        'S2alpha' : 2.5,   'S2beta' : 2,   'S2gamma' : 8, 
        'M2alpha' : 1.5,   'M2beta' : 2,   'M2gamma' : 12, 
        'L2alpha' : 2.5,  'L2beta' : 2, 'L2gamma' : 16}

    invardefs = [
            ('x0', [BellMembFunc(p['S1alpha'], p['S1beta'], p['S1gamma']), BellMembFunc(p['M1alpha'], p['M1beta'], p['M1gamma']), BellMembFunc(p['L1alpha'], p['L1beta'], p['L1gamma'])]),
            ('x1', [BellMembFunc(p['S2alpha'], p['S2beta'], p['S2gamma']), BellMembFunc(p['M2alpha'], p['M2beta'], p['M2gamma']), BellMembFunc(p['L2alpha'], p['L2beta'], p['L2gamma'])]),
            ]
    outvars = ['y0']

    return anfis.AnfisNet('SSIE616', invardefs, outvars)


dlTrain, dlTest = MakeData()
anfModel = MakeModel()

trainRMSE = 99
lastRMSE = 100
testRMSE = 99
while testRMSE < lastRMSE:
    with open('output.txt', 'a') as f:
        f.write('TRAINING RMS error={:.5f}'.format(trainRMSE))
        f.write('\n')
        f.write('TEST RMS error={:.5f}'.format(testRMSE))
        f.write('\n')
        f.write('\n')
        f.write(str(anfModel.layer.fuzzify.__repr__))
        f.write('\n')
        f.write('\n')
        f.write(str(anfModel.layer.consequent.coeff))
        f.write('\n')
        f.write('\n')
    trainRMSE = train_anfis(anfModel, dlTrain, 500, show_plots=False)
    lastRMSE = testRMSE
    testRMSE = test_anfis(anfModel, dlTest)


print('done')
